---
# Kubernetes Cluster Setup Tasks
# This role can be used standalone or with Kubespray for more advanced setups

- name: Install Kubernetes prerequisites
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Add Kubernetes GPG key
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
    state: present
  when: ansible_os_family == "Debian"

- name: Add Kubernetes repository
  apt_repository:
    repo: "deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
    state: present
    filename: kubernetes
  when: ansible_os_family == "Debian"

- name: Install Kubernetes components
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Hold Kubernetes packages at current version
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
  when: ansible_os_family == "Debian"

- name: Disable swap
  command: swapoff -a
  changed_when: false

- name: Remove swap from fstab
  lineinfile:
    path: /etc/fstab
    regexp: '.*swap.*'
    state: absent

- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Configure sysctl for Kubernetes
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }

- name: Initialize Kubernetes master
  command: >
    kubeadm init 
    --pod-network-cidr={{ k8s_pod_network_cidr | default('10.244.0.0/16') }}
    --apiserver-advertise-address={{ ansible_default_ipv4.address }}
  when: "'kube_control_plane' in group_names or 'master' in group_names"
  register: kubeadm_init
  ignore_errors: yes

- name: Create .kube directory
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0755'
  when: "'kube_control_plane' in group_names or 'master' in group_names"

- name: Copy kubeconfig to user home
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    remote_src: yes
    mode: '0600'
  when: "'kube_control_plane' in group_names or 'master' in group_names"

- name: Install Calico CNI plugin
  command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
  when: "'kube_control_plane' in group_names or 'master' in group_names"
  ignore_errors: yes

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command
  when: "'kube_control_plane' in group_names or 'master' in group_names"
  changed_when: false

- name: Save join command
  set_fact:
    k8s_join_command: "{{ join_command.stdout }}"
  when: "'kube_control_plane' in group_names or 'master' in group_names"
  delegate_to: "{{ item }}"
  delegate_facts: yes
  loop: "{{ groups['all'] }}"

- name: Join worker nodes to cluster
  command: "{{ hostvars[groups['kube_control_plane'][0]]['k8s_join_command'] }}"
  when: "'kube_node' in group_names or 'worker' in group_names"
  ignore_errors: yes

- name: Install kubectl bash completion
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: 'source <(kubectl completion bash)'
    create: yes

- name: Create NGINX Ingress Controller
  command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml
  when: "'kube_control_plane' in group_names or 'master' in group_names"
  ignore_errors: yes

- name: Wait for all nodes to be ready
  command: kubectl get nodes
  register: nodes_status
  until: nodes_status.stdout.find("NotReady") == -1
  retries: 30
  delay: 10
  when: "'kube_control_plane' in group_names or 'master' in group_names"
  changed_when: false
  ignore_errors: yes

- name: Display cluster info
  command: kubectl cluster-info
  register: cluster_info
  when: "'kube_control_plane' in group_names or 'master' in group_names"
  changed_when: false

- name: Show cluster information
  debug:
    msg: |
      Kubernetes cluster has been set up!
      {{ cluster_info.stdout if cluster_info is defined else 'Run kubectl cluster-info on the master node' }}
  when: "'kube_control_plane' in group_names or 'master' in group_names"

# Alternative: Use Kubespray for production-grade cluster
- name: Install Kubespray (alternative method)
  block:
    - name: Clone Kubespray repository
      git:
        repo: https://github.com/kubernetes-sigs/kubespray.git
        dest: /opt/kubespray
        version: release-2.23
    
    - name: Install Kubespray requirements
      pip:
        requirements: /opt/kubespray/requirements.txt
        state: present
    
    - name: Copy inventory
      copy:
        src: /opt/kubespray/inventory/sample
        dest: /opt/kubespray/inventory/whanos
        remote_src: yes
    
    - name: Display Kubespray instructions
      debug:
        msg: |
          Kubespray has been prepared. To deploy with Kubespray:
          1. Configure inventory in /opt/kubespray/inventory/whanos
          2. Run: ansible-playbook -i /opt/kubespray/inventory/whanos/hosts.yaml /opt/kubespray/cluster.yml
  when: use_kubespray | default(false)
  tags: [never, kubespray]
